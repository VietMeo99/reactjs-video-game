{"version":3,"sources":["utils/apiCaller.js","constants/KeyConstants.js","actions/GamesActions.js","utils/GamesUtils.js","selectors/GamesSelectors.js","containers/GamesContainer.js"],"names":["camelize","require","instanceNext","axios","create","baseURL","API_URL","timeout","fetchApi","endpoint","a","method","body","params","sourceToken","url","data","cancelToken","interceptors","request","use","config","Promise","resolve","error","reject","response","message","GENRE_COLLECTION_TYPE","SEARCH_COLLECTION_TYPE","TAG_COLLECTION_TYPE","GAME_COLLECTION_TYPE","gamesFetchRequest","collectionKey","type","FETCH_GAMES_REQUEST","payload","gamesFetchSuccess","fetchedData","nextUrl","FETCH_GAMES_SUCCESS","fetchGames","dispatch","next","results","console","log","fetchGamesNext","gamesNextUrl","getState","state","games","getGames","collection","isFetching","isExist","loading","fetchGamesIfNeeded","isExists","hasItems","length","collections","gamesUrlByGenre","genre","genreUriSegment","GAMES_PATH","gamesUrlBySearch","search","searchUriSegment","gamesUrlByTag","tag","gamesByCollectionKey","getGameCollectionData","createSelector","getGenre","getSearch","getTag","join","gamesUrl","connect","genres","GENRES","windowSize","getWindowSize","likes","getLikes","isAuthenticated","getIsAuthenticated","changeRoute","playFullVideo","toggleLike","Games"],"mappings":"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","file":"static/js/5.93d99439.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from '../constants/urlApi';\r\nconst camelize = require('camelize');\r\n\r\nconst instanceNext = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 10000\r\n});\r\n\r\ninstanceNext.interceptors.request.use(\r\n  config => Promise.resolve(config),\r\n  error => Promise.reject(error)\r\n);\r\n\r\ninstanceNext.interceptors.response.use(\r\n  response => camelize(response.data),\r\n  error => {\r\n    if (error.response) {\r\n      return Promise.reject(error.response);\r\n    }\r\n    if (error.request) {\r\n      return Promise.reject(error.request);\r\n    }\r\n    return Promise.reject(error.message);\r\n  }\r\n);\r\n\r\nexport async function fetchApi(\r\n  endpoint,\r\n  method = 'GET',\r\n  body,\r\n  params,\r\n  sourceToken\r\n) {\r\n  return instanceNext({\r\n    method: method,\r\n    url: endpoint,\r\n    data: body,\r\n    params: params,\r\n    cancelToken: sourceToken\r\n  });\r\n}\r\n\r\nexport async function fetchAllApi(requests = []) {\r\n  return axios.all(requests);\r\n}\r\n","export const GENRE_COLLECTION_TYPE = 'GENRE_COLLECTION_TYPE';\r\nexport const SEARCH_COLLECTION_TYPE = 'GENRE_COLLECTION_TYPE';\r\nexport const TAG_COLLECTION_TYPE = 'TAG_COLLECTION_TYPE';\r\n\r\nexport const GAME_COLLECTION_TYPE = 'GAME_COLLECTION_TYPE';\r\n","import {\r\n  FETCH_GAMES_REQUEST,\r\n  FETCH_GAMES_SUCCESS\r\n} from '../constants/ActionTypes';\r\nimport { fetchApi } from '../utils/apiCaller';\r\nimport { getGames } from '../selectors/CommonSelectors';\r\n\r\nexport const gamesFetchRequest = collectionKey => ({\r\n  type: FETCH_GAMES_REQUEST,\r\n  payload: { collectionKey }\r\n});\r\n\r\nexport const gamesFetchSuccess = (collectionKey, fetchedData, nextUrl) => ({\r\n  type: FETCH_GAMES_SUCCESS,\r\n  payload: { collectionKey, fetchedData, nextUrl }\r\n});\r\n\r\nexport const fetchGames = (collectionKey, url, method) => async dispatch => {\r\n  try {\r\n    dispatch(gamesFetchRequest(collectionKey));\r\n    const data = await fetchApi(url, method);\r\n\r\n    const { next, results } = data;\r\n\r\n    dispatch(gamesFetchSuccess(collectionKey, results, next));\r\n  } catch (err) {\r\n    console.log('fetchGames error', err);\r\n  }\r\n};\r\n\r\nexport const fetchGamesNext = (collectionKey, gamesNextUrl) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const games = getGames(state);\r\n  const collection = games[collectionKey];\r\n  const isExist = !!collection;\r\n  const isFetching = isExist ? collection.loading : false;\r\n  const shouldFetch = isExist && !isFetching && gamesNextUrl;\r\n  if (shouldFetch) {\r\n    dispatch(fetchGames(collectionKey, gamesNextUrl));\r\n  }\r\n};\r\n\r\nexport const fetchGamesIfNeeded = (collectionKey, url) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const games = getGames(state);\r\n  const collection = games[collectionKey];\r\n  const isExists = !!collection;\r\n  const isFetching = isExists ? collection.loading : false;\r\n  const hasItems = isExists ? collection.games.length > 0 : false;\r\n  if (!isExists || (!hasItems && !isFetching)) {\r\n    dispatch(fetchGames(collectionKey, url));\r\n  }\r\n};\r\n","import { GAMES_PATH } from '../constants/urlApi';\r\nimport {\r\n  GENRE_COLLECTION_TYPE,\r\n  SEARCH_COLLECTION_TYPE,\r\n  TAG_COLLECTION_TYPE\r\n} from '../constants/KeyConstants';\r\n\r\nconst isFetching = (collections, collectionKey) =>\r\n  !!collections[collectionKey] ? collections[collectionKey].loading : false;\r\n\r\nconst gamesUrlByGenre = genre => {\r\n  const genreUriSegment = `genres=${genre}`;\r\n  return `${GAMES_PATH}?${genreUriSegment}`;\r\n};\r\n\r\nconst gamesUrlBySearch = search => {\r\n  const searchUriSegment = `search=${search}`;\r\n  return `${GAMES_PATH}?${searchUriSegment}`;\r\n};\r\n\r\nconst gamesUrlByTag = tag => {\r\n  const searchUriSegment = `tags=${tag}`;\r\n  return `${GAMES_PATH}?${searchUriSegment}`;\r\n};\r\n\r\nconst gamesNextUrl = (collections, collectionKey) =>\r\n  !!collections[collectionKey] ? collections[collectionKey].nextUrl : null;\r\n\r\nconst gamesByCollectionKey = (collections, collectionKey) =>\r\n  !!collections[collectionKey] ? collections[collectionKey].games : [];\r\n\r\nexport const gameCollectionData = (games, genre, search, tag) => {\r\n  if (search) {\r\n    const collectionKey = [SEARCH_COLLECTION_TYPE, search].join('|');\r\n    return {\r\n      loading: isFetching(games, collectionKey),\r\n      gamesUrl: gamesUrlBySearch(search),\r\n      gamesNextUrl: gamesNextUrl(games, collectionKey),\r\n      games: gamesByCollectionKey(games, collectionKey),\r\n      collectionKey\r\n    };\r\n  } else if (tag) {\r\n    const collectionKey = [TAG_COLLECTION_TYPE, tag].join('|');\r\n    return {\r\n      loading: isFetching(games, collectionKey),\r\n      gamesUrl: gamesUrlByTag(tag),\r\n      gamesNextUrl: gamesNextUrl(games, collectionKey),\r\n      games: gamesByCollectionKey(games, collectionKey),\r\n      collectionKey\r\n    };\r\n  }\r\n\r\n  const collectionKey = [GENRE_COLLECTION_TYPE, genre].join('|');\r\n  return {\r\n    loading: isFetching(games, collectionKey),\r\n    gamesUrl: gamesUrlByGenre(genre),\r\n    gamesNextUrl: gamesNextUrl(games, collectionKey),\r\n    games: gamesByCollectionKey(games, collectionKey),\r\n    collectionKey\r\n  };\r\n};\r\n","import { createSelector } from 'reselect';\r\nimport { getGames, getGenre, getSearch, getTag } from './CommonSelectors';\r\nimport { gameCollectionData } from '../utils/GamesUtils';\r\n\r\nexport const getGameCollectionData = createSelector(\r\n  getGames,\r\n  getGenre,\r\n  getSearch,\r\n  getTag,\r\n  gameCollectionData\r\n);\r\n","import { connect } from 'react-redux';\r\nimport { Games } from '../components';\r\nimport {\r\n  getGenre,\r\n  getWindowSize,\r\n  getLikes,\r\n  getIsAuthenticated\r\n} from '../selectors/CommonSelectors';\r\nimport { getGameCollectionData } from '../selectors/GamesSelectors';\r\nimport { GENRES } from '../constants/GlobalConstants';\r\nimport { changeRoute } from '../actions/RouterActions';\r\nimport { fetchGamesNext, fetchGamesIfNeeded } from '../actions/GamesActions';\r\nimport { playFullVideo } from '../actions/AppActions';\r\nimport { toggleLike } from '../actions/UserActions';\r\n\r\nconst mapStateToProps = state => { // gọi state từ store\r\n  return {\r\n    ...getGameCollectionData(state),\r\n    genres: GENRES,\r\n    genre: getGenre(state),\r\n    windowSize: getWindowSize(state),\r\n    likes: getLikes(state),\r\n    isAuthenticated: getIsAuthenticated(state)\r\n  };\r\n};\r\n // mapDispatchToProps : cứ hiểu là gọi theo dang function\r\n //thực hiện các hành động theo case mình đã đặt\r\nexport default connect(mapStateToProps, {\r\n  fetchGamesNext,\r\n  fetchGamesIfNeeded,\r\n  changeRoute,\r\n  playFullVideo,\r\n  toggleLike\r\n})(Games);\r\n"],"sourceRoot":""}